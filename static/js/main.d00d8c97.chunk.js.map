{"version":3,"sources":["cwn-onto-3d/data-api.ts","cwn-onto-3d/onto-state.ts","cwn-onto-3d/wsd-view.tsx","cwn-onto-3d/sense-3d-view.tsx","cwn-onto-3d/build-graph.ts","cwn-onto-3d/cwn-onto-3d.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["API_URL","get_tag","sentence","dummy","fetch","method","headers","body","JSON","stringify","sentences","then","result","json","data","get_wsd","taggedList","tagged","get_lemma_senses","resp","lemmasStr","map","x","join","url","URL","search","URLSearchParams","lemmas","toString","get_sense_clouds","senseIds","sids","get_sense_data","senseId","initState","tokens","senseClouds","lemmaSenses","selSenseData","reducer","state","action","newState","Object","assign","type","payload","WsdView","props","console","log","words","idx","key","className","endsWith","Sense3dView","graph3D","useEffect","graphData","V","E","lemmaMap","token","lemma","nid","push","id","label","fx","fy","fz","entries","val","sense","pos","definition","reduce","sum","lemmaNodeId","undefined","length","eid","srcSenseId","senseCloud","relations","headWord","senseDef","source","target","pwn","pwnId","pwn_onto","link_chains","chain","src","edgeLabel","prevPwnId","curPwnId","link_to_base","edgeLable","hypernyms","hyponyms","holonyms","meronyms","G","nodes","values","links","build_graph","graphElem","document","getElementById","ForceGraph3D","elemWidth","parentElement","clientWidth","width","height","nodeLabel","nodeAutoColorBy","nodeVal","linkWidth","zoomToFit","CwnOnto3D","useReducer","ontoState","dispatch","controller","updateSentence","completeFn","isDummy","api","lemma_senses","clouds","selectSense","useOntoState","inputElem","useRef","useState","isLoading","setIsLoading","spinner","ref","onKeyDown","ev","current","txtInput","value","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+TAEMA,G,MAAU,gCAET,SAASC,EAAQC,GAAqD,IAAnCC,EAAkC,wDAc1E,OAZIA,EACKC,MAAM,iBAENA,MAAMJ,EAAQ,MAAO,CAC1BK,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACnBC,UAAW,CAACR,QAMfS,MAAK,SAACC,GAAD,OAAYA,EAAOC,UACxBF,MAAK,SAACC,GAGL,OAFWA,EAAOE,KACY,MAK7B,SAASC,EAAQC,GAA2D,IAAnCb,EAAkC,wDAchF,OAZIA,EACKC,MAAM,iBAENA,MAAMJ,EAAQ,MAAO,CAC1BK,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACnBQ,OAAQ,CAACD,QAMZL,MAAK,SAACC,GAAD,OAAYA,EAAOC,UACxBF,MAAK,SAACC,GAGL,OAFWA,EAAOE,KACY,MAK7B,SAASI,EAAiBF,GAA4D,IACvFG,EADmDhB,EAAmC,wDAE1F,GAAIA,EACFgB,EAAOf,MAAM,wBACR,CACL,IAAIgB,EAAYJ,EAAWK,KAAI,SAACC,GAAD,OAAKA,EAAE,MAAIC,KAAK,KAC3CC,EAAM,IAAIC,IAAIzB,EAAQ,SAC1BwB,EAAIE,OAAS,IAAIC,gBAAgB,CAACC,OAAQR,IAAYS,WACtDV,EAAOf,MAAMoB,EAAIK,YAGnB,OAAOV,EACJR,MAAK,SAACC,GAAD,OAAYA,EAAOC,UACxBF,MAAK,SAACC,GAEL,OADWA,EAAOE,QAKjB,SAASgB,EAAiBd,GAA4D,IACvFG,EADmDhB,EAAmC,wDAE1F,GAAIA,EACFgB,EAAOf,MAAM,8BACR,CACL,IAAI2B,EAAWf,EAAWK,KAAI,SAACC,GAAD,OAAKA,EAAE,MAAIC,KAAK,KAC1CC,EAAM,IAAIC,IAAIzB,EAAQ,eAC1BwB,EAAIE,OAAS,IAAIC,gBAAgB,CAACK,KAAMD,IAAWF,WACnDV,EAAOf,MAAMoB,EAAIK,YAGnB,OAAOV,EACJR,MAAK,SAACC,GAAD,OAAYA,EAAOC,UACxBF,MAAK,SAACC,GAEL,OADWA,EAAOE,QAKjB,SAASmB,EAAeC,GAAmD,IAC5Ef,EAD0ChB,EAAiC,wDAE/E,GAAIA,EACFgB,EAAOf,MAAM,8BACR,CACL,IAAIoB,EAAM,IAAIC,IAAIzB,EAAQ,cAAgBkC,GAC1Cf,EAAOf,MAAMoB,EAAIK,YAGnB,OAAOV,EACJR,MAAK,SAACC,GAAD,OAAYA,EAAOC,UACxBF,MAAK,SAACC,GAEL,OADWA,EAAOE,QCtDxB,SAASqB,IACP,MAAO,CACLjC,SAAU,GACVkC,OAAQ,GACRC,YAAa,GACbC,YAAa,GACbC,aAAc,IAIlB,SAASC,EAAQC,EAAqBC,GACpC,IAAIC,EAAWC,OAAOC,OAAO,GAAIJ,GACjC,OAAQC,EAAOI,MACb,IAAK,eACHH,EAASzC,SAAWwC,EAAOK,QAC3B,MACF,IAAK,aACHJ,EAASP,OAASM,EAAOK,QACzB,MACF,IAAK,mBACHJ,EAASL,YAAcI,EAAOK,QAC9B,MACF,IAAK,mBACHJ,EAASN,YAAcK,EAAOK,QAC9B,MACF,IAAK,eACHJ,EAASJ,aAAeG,EAAOK,QAC/B,MACF,IAAK,cACHJ,EA5BG,CACLzC,SAAU,GACVkC,OAAQ,GACRC,YAAa,GACbC,YAAa,GACbC,aAAc,IA4BhB,OAAOI,E,MCxEF,SAASK,EAAQC,GACtBC,QAAQC,IAAI,WACZD,QAAQC,IAAIF,GACZ,IAAIG,EAAQH,EAAMb,OAAOf,KAAI,SAACC,EAAa+B,GACzC,OACE,yBAAKC,IAAG,gBAAWhC,EAAE,GAAb,YAAmB+B,GAAOE,UAAU,iBAC1C,yBAAKA,UAAU,OACZjC,EAAE,GAAGkC,SAAS,YAAa,GAAIlC,EAAE,IAEpC,yBAAKiC,UAAU,QAAQjC,EAAE,IACzB,yBAAKiC,UAAU,8BAA8BjC,EAAE,QAIrD,OACE,yBAAKiC,UAAU,oBACZH,G,kBCZA,SAASK,EAAYR,GAC1B,IAAIS,EA0BJ,OAxBAC,qBAAU,WACRT,QAAQC,IAAI,iBACZ,IAAIS,ECMD,SAAqBxB,EAAoBE,EAA0BD,GACxE,IAAIwB,EAAI,GACJC,EAAI,GAIJC,EAA0C,GAC9C3B,EAAOf,KAAI,SAAC2C,EAAOX,GACjB,IAAIY,EAAQD,EAAM,GACdE,EAAG,UAAMD,EAAN,YAAeZ,GAElBY,KAASF,EACXA,EAASE,GAAOE,KAAKD,GAErBH,EAASE,GAAS,CAACC,GAGrBL,EAAEK,GAAO,CACPE,GAAIF,EAAKpB,KAAM,QAASuB,MAAOJ,EAC/BK,GAAU,IAANjB,EAAWkB,GAAI,EAAGC,GAAI,MAI9B5B,OAAO6B,QAAQnC,GACZjB,KAAI,SAACqD,EAAKrB,GAAS,IAAD,cACKqB,EADL,GACZT,EADY,UAGV5C,KAAI,SAACsD,GACVd,EAAEc,EAAMP,IAAM,CACZA,GAAIO,EAAMP,GACVtB,KAAM,WACNuB,MAAM,IAAD,OAAMM,EAAMC,IAAZ,aAAoBD,EAAME,YAC/BP,GAAIP,EAASE,GAAOa,QAAO,SAACC,EAAKC,GAE/B,OADAD,QAA6BE,IAAtBpB,EAAEmB,GAAaV,GAAmBT,EAAEmB,GAAaV,GAAM,IAE7D,GAAKP,EAASE,GAAOiB,QAG1BnB,EAASE,GAAO5C,KAAI,SAAC2D,GACnB,IAAIG,EAAG,UAAMH,EAAN,YAAqBL,EAAMP,IAClCN,EAAEqB,GAAO,CACP,OAAUH,EACV,OAAUL,EAAMP,GAChB,MAAS,qBAOnB/B,EAAcA,GAA4B,GAE1CO,OAAO6B,QAAQpC,GACZhB,KAAI,SAACqD,EAAKrB,GAAS,IAAD,cACcqB,EADd,GACZU,EADY,KACAC,EADA,KAGjBA,EAAWC,UAAUjE,KAAI,SAACsD,GAAW,IAAD,cACgBA,EADhB,GACpBzC,GADoB,WACXqD,EADW,KACDX,EADC,KACIY,EADJ,KAE5BtD,KAAW2B,IACfA,EAAE3B,GAAW,CACXkC,GAAIlC,EAASY,KAAM,WAAYuB,MAAM,IAAD,OAAMkB,EAAN,cAAoBX,EAApB,aAA4BY,KAIpE,IAAIL,EAAG,UAAMC,EAAN,YAAoBlD,GAC3B4B,EAAEqB,GAAO,CACPM,OAAQL,EAAYM,OAAQxD,EAASmC,MAAO,kBAb/B,kBAkBAgB,EAAWM,IAlBX,GAkBTC,GAlBS,WAmBjB,QAAcX,IAAVW,GAAiC,KAAVA,EAAc,CACjCA,KAAS/B,IACbA,EAAE+B,GAAS,CACTxB,GAAIwB,EAAO9C,KAAM,YAAauB,MAAOuB,EACrCrB,IAxEU,MA4Ed,IAAIY,EAAG,UAAMC,EAAN,YAAoBQ,GAC3B9B,EAAEqB,GAAO,CACPM,OAAQL,EAAYM,OAAQE,EAAOvB,MAAO,cAM9C,IAAIwB,EAAWR,EAAWQ,SAEtBC,EAAc,SAACC,EAA6BC,EAAaC,QAC7ChB,IAAVc,GAIJA,EAAMjB,QAAO,SAACoB,EAAWC,GACjBA,KAAYtC,IAChBA,EAAEsC,GAAY,CACZ/B,GAAI+B,EAAUrD,KAAM,YAAauB,MAAO8B,EACxC5B,IA9FQ,MAkGZ,IAAIY,EAAG,UAAMe,EAAN,YAAmBC,GAI1B,OAHArC,EAAEqB,GAAO,CACPM,OAAQS,EAAWR,OAAQS,EAAU9B,MAAO4B,GAEvCE,IACNH,IAGDI,EAAe,SAACL,EAA6BC,EAAaK,QAC9CpB,IAAVc,GAIJA,EAAM1E,KAAI,SAAC8E,GACHA,KAAYtC,IAChBA,EAAEsC,GAAY,CACZ/B,GAAI+B,EAAUrD,KAAM,WAAYuB,MAAO8B,EACvC5B,IAnHQ,MAuHZ,IAAIY,EAAG,UAAMa,EAAN,YAAaG,GACpBrC,EAAEqB,GAAO,CACPM,OAAQO,EAAKN,OAAQS,EAAU9B,MAAOgC,OAK5CP,EAAYD,EAASS,UAAWV,EAAO,aACvCE,EAAYD,EAASU,SAAUX,EAAO,YACtCQ,EAAaP,EAASW,SAAUZ,EAAO,YACvCQ,EAAaP,EAASY,SAAUb,EAAO,eAI3C,IAAIc,EAAI,CAAEC,MAAO/D,OAAOgE,OAAO/C,GAAIgD,MAAOjE,OAAOgE,OAAO9C,IAExD,OADAZ,QAAQC,IAAIuD,GACLA,EDlJWI,CAAY7D,EAAMb,OAAQa,EAAMX,YAAaW,EAAMZ,aAC/D0E,EAAYC,SAASC,eAAe,YAExC,GAAiB,OAAdF,EAAmB,CACpBrD,EAAUwD,cAAeH,GACzB,IAAII,EAAYJ,EAAUK,cAAeC,YAEzC3D,EAAQE,UAAUA,GACf0D,MAAMH,GACNI,OAAO,KACPC,UAAU,SACVC,gBAAgB,QAChBC,SAAQ,SAACpG,GAER,MAAgB,SADLA,EACHwB,KAAwB,GACpB,KAEb6E,UAAU,GACVC,UAAU,IAAK,OAEnB,CAAC3E,EAAMX,YAAaW,EAAMZ,cAG3B,yBAAK+B,GAAG,aElCL,SAASyD,IAAa,IAAD,EJkFrB,WAAyB,IAAD,EACDC,qBAAWtF,EAAS,GAAoBL,GADvC,mBACxB4F,EADwB,KACbC,EADa,KAkD7B,MAAO,CAACD,YAAWE,WADF,CAAEC,eA9CnB,SAAwBhI,EAAkBiI,GAAsC,IAAhBC,EAAe,wDAC1ElI,IAAa6H,EAAU7H,WACxB8H,EAAS,CAAC,KAAQ,gBAClBA,EAAS,CAAC,KAAQ,eAAgB,QAAW9H,IAK/CmI,EAAYnI,EAAUkI,GACnBzH,MAAK,SAACyB,GAWL,OAVAc,QAAQC,IAAI,UACZD,QAAQC,IAAIf,GACZ4F,EAAS,CAAC,KAAQ,aAAc,QAAW5F,IAC3CiG,EAAqBjG,EAAQgG,GAC1BzH,MAAK,SAAC2H,GACLpF,QAAQC,IAAI,gBACZD,QAAQC,IAAImF,GACZN,EAAS,CAAC,KAAQ,mBAAoB,QAAWM,OAE3CD,EAAYjG,EAAQgG,MAE7BzH,MAAK,SAACyB,GAMP,OALAc,QAAQC,IAAI,OACZD,QAAQC,IAAIf,GACZ4F,EAAS,CAAC,KAAQ,aAAc,QAAW5F,IAExBiG,EAAqBjG,EAAQgG,MAE/CzH,MAAK,SAAC4H,GACPrF,QAAQC,IAAI,gBACZD,QAAQC,IAAIoF,GAEZP,EAAS,CAAC,KAAQ,mBAAoB,QAAWO,IACjDJ,SAa6BK,YATnC,SAAqBtG,GAAiC,IAAhBkG,EAAe,wDACnDC,EAAmBnG,EAASkG,GACzBzH,MAAK,SAACG,GACLoC,QAAQC,IAAI,cACZD,QAAQC,IAAIrC,GACZkH,EAAS,CAAC,KAAQ,eAAgB,QAAWlH,UI9HnB2H,GAA1BV,EADoB,EACpBA,UAAWE,EADS,EACTA,WACbS,EAAYC,iBAAyB,MAFf,EAGMC,oBAAS,GAHf,mBAGrBC,EAHqB,KAGVC,EAHU,KAK1BnF,qBAAU,WACRsE,EAAWC,eAAe,aAAa,kBAAIY,GAAa,MAAQ,KAC/D,IAEH,IAWIC,EAAUF,EAAY,yBAAKtF,UAAU,UAAf,WAAwC,KAClE,OACE,yBAAKA,UAAU,aACb,2BACEyF,IAAKN,EACLtE,GAAG,YAAYtB,KAAK,OACpBmG,UAjBe,SAACC,GACpB,GAAe,UAAXA,EAAG5F,MACLJ,QAAQC,IAAI,SACRuF,EAAUS,SAAQ,CACpBL,GAAa,GACb,IAAIM,EAAWV,EAAUS,QAAQE,MACjCpB,EAAWC,eAAekB,GAAU,kBAAIN,GAAa,QAYrDQ,YAAY,6BACd,yBAAK/F,UAAU,eACZwF,EACD,kBAAC/F,EAAD,CAASZ,OAAQ2F,EAAU3F,SAC3B,kBAACqB,EAAD,CACErB,OAAQ2F,EAAU3F,OAClBE,YAAayF,EAAUzF,YACvBD,YAAa0F,EAAU1F,gBC5BlBkH,MARf,WACE,OACE,yBAAKhG,UAAU,OACb,kBAACsE,EAAD,QCKc2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF/C,SAASC,eAAe,SDiIpB,kBAAmB+C,WACrBA,UAAUC,cAAcC,MACrBvJ,MAAK,SAAAwJ,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpH,QAAQoH,MAAMA,EAAMC,c","file":"static/js/main.d00d8c97.chunk.js","sourcesContent":["import { WsdToken, LemmaSenses, SenseClouds, SenseData } from './data-types';\r\n\r\nconst API_URL = \"http://140.112.147.132:5555/\";\r\n\r\nexport function get_tag(sentence: string, dummy=false): Promise<WsdToken[]> {\r\n  let resp: Promise<Response>;\r\n  if (dummy){\r\n    resp = fetch(\"data/tag.json\")\r\n  } else {\r\n    resp = fetch(API_URL+\"tag\", {\r\n      method: \"POST\",\r\n      headers: {\"Content-Type\": \"application/json\"},\r\n      body: JSON.stringify({\r\n        sentences: [sentence]\r\n      })\r\n    })\r\n  }\r\n\r\n  return resp\r\n    .then((result) => result.json())\r\n    .then((result) => {\r\n      let data = result.data;\r\n      let tokens: WsdToken[] = data[0];\r\n      return tokens\r\n    });\r\n}\r\n\r\nexport function get_wsd(taggedList: WsdToken[], dummy=false): Promise<WsdToken[]> {\r\n  let resp: Promise<Response>;\r\n  if (dummy){\r\n    resp = fetch(\"data/wsd.json\")\r\n  } else {\r\n    resp = fetch(API_URL+\"wsd\", {\r\n      method: \"POST\",\r\n      headers: {\"Content-Type\": \"application/json\"},\r\n      body: JSON.stringify({\r\n        tagged: [taggedList]\r\n      })\r\n    })\r\n  }\r\n\r\n  return resp\r\n    .then((result) => result.json())\r\n    .then((result) => {\r\n      let data = result.data;\r\n      let tokens: WsdToken[] = data[0];\r\n      return tokens\r\n    });\r\n}\r\n\r\nexport function get_lemma_senses(taggedList: WsdToken[], dummy=false): Promise<LemmaSenses> {\r\n  let resp: Promise<Response>;\r\n  if (dummy){\r\n    resp = fetch(\"data/lemmas.json\")\r\n  } else {\r\n    let lemmasStr = taggedList.map((x)=>x[0]).join(\",\");\r\n    let url = new URL(API_URL+\"lemma\");\r\n    url.search = new URLSearchParams({lemmas: lemmasStr}).toString();\r\n    resp = fetch(url.toString());\r\n  }\r\n\r\n  return resp\r\n    .then((result) => result.json())\r\n    .then((result) => {\r\n      let data = result.data;\r\n      return data as LemmaSenses;\r\n    });\r\n}\r\n\r\nexport function get_sense_clouds(taggedList: WsdToken[], dummy=false): Promise<SenseClouds> {\r\n  let resp: Promise<Response>;\r\n  if (dummy){\r\n    resp = fetch(\"data/sense_clouds.json\")\r\n  } else {\r\n    let senseIds = taggedList.map((x)=>x[2]).join(\",\");\r\n    let url = new URL(API_URL+\"sense_cloud\");\r\n    url.search = new URLSearchParams({sids: senseIds}).toString();\r\n    resp = fetch(url.toString());\r\n  }\r\n\r\n  return resp\r\n    .then((result) => result.json())\r\n    .then((result) => {\r\n      let data = result.data;\r\n      return data as SenseClouds;\r\n    });\r\n}\r\n\r\nexport function get_sense_data(senseId: string, dummy=false): Promise<SenseData> {\r\n  let resp: Promise<Response>;\r\n  if (dummy){\r\n    resp = fetch(\"data/sense_clouds.json\")\r\n  } else {\r\n    let url = new URL(API_URL+\"sense_data/\" + senseId);\r\n    resp = fetch(url.toString());\r\n  }\r\n\r\n  return resp\r\n    .then((result) => result.json())\r\n    .then((result) => {\r\n      let data = result.data;\r\n      return data as SenseData;\r\n    });\r\n}","import React, { useState, useReducer } from 'react';\r\nimport { WsdToken, SenseClouds, SenseData, LemmaSenses } from \"./data-types\";\r\nimport * as api from './data-api';\r\n\r\ninterface CwnOntoState {\r\n  sentence: string;\r\n  tokens: WsdToken[];\r\n  senseClouds: SenseClouds;\r\n  lemmaSenses: LemmaSenses;\r\n  selSenseData: SenseData;\r\n}\r\n\r\ntype CwnOntoAction =\r\n  COA_NewSentence | COA_NewTokens | \r\n  COA_NewSenseClouds | COA_NewLemmaSenses |\r\n  COA_SelectedSense | COA_ResetState;\r\n\r\ninterface COA_NewSentence {\r\n  type: \"NEW_SENTENCE\",\r\n  payload: string\r\n}\r\n\r\ninterface COA_NewTokens {\r\n  type: \"NEW_TAGGED\",\r\n  payload: WsdToken[]\r\n}\r\n\r\ninterface COA_NewLemmaSenses {\r\n  type: \"NEW_LEMMA_SENSES\",\r\n  payload: LemmaSenses\r\n}\r\n\r\ninterface COA_NewSenseClouds {\r\n  type: \"NEW_SENSE_CLOUDS\",\r\n  payload: SenseClouds\r\n}\r\n\r\ninterface COA_SelectedSense {\r\n  type: \"SELECT_SENSE\",\r\n  payload: SenseData\r\n}\r\n\r\ninterface COA_ResetState {\r\n  type: \"RESET_STATE\"\r\n}\r\n\r\nfunction initState(){\r\n  return {\r\n    sentence: \"\",\r\n    tokens: [],\r\n    senseClouds: {} as SenseClouds,\r\n    lemmaSenses: {} as LemmaSenses,\r\n    selSenseData: {} as SenseData\r\n  } as CwnOntoState\r\n}\r\n\r\nfunction reducer(state: CwnOntoState, action: CwnOntoAction) {\r\n  let newState = Object.assign({}, state);\r\n  switch (action.type) {\r\n    case 'NEW_SENTENCE':\r\n      newState.sentence = action.payload;\r\n      break;\r\n    case 'NEW_TAGGED':\r\n      newState.tokens = action.payload;\r\n      break;    \r\n    case 'NEW_LEMMA_SENSES':\r\n      newState.lemmaSenses = action.payload;\r\n      break;\r\n    case 'NEW_SENSE_CLOUDS':\r\n      newState.senseClouds = action.payload;\r\n      break;\r\n    case 'SELECT_SENSE':\r\n      newState.selSenseData = action.payload;\r\n      break;\r\n    case 'RESET_STATE':\r\n      newState = initState();\r\n      break;\r\n    default:\r\n    // pass\r\n  }\r\n  return newState;\r\n}\r\n\r\nexport interface ontoController {\r\n  updateSentence: (sentence: string, completeFn: ()=>void, isDummy?: boolean) => void,\r\n  selectSense: (senseId: string) => void\r\n}\r\n\r\nexport function useOntoState() {\r\n  let [ontoState, dispatch] = useReducer(reducer, {} as CwnOntoState, initState);\r\n\r\n  function updateSentence(sentence: string, completeFn: ()=>void, isDummy=false) {    \r\n    if(sentence !== ontoState.sentence){\r\n      dispatch({\"type\": \"RESET_STATE\"});\r\n      dispatch({\"type\": \"NEW_SENTENCE\", \"payload\": sentence});\r\n    } else {\r\n      return;\r\n    }\r\n    \r\n    api.get_tag(sentence, isDummy)\r\n      .then((tokens) => {\r\n        console.log(\"tagged\");\r\n        console.log(tokens);\r\n        dispatch({\"type\": \"NEW_TAGGED\", \"payload\": tokens});\r\n        api.get_lemma_senses(tokens, isDummy)\r\n          .then((lemma_senses) => {\r\n            console.log(\"lemma senses\");\r\n            console.log(lemma_senses);\r\n            dispatch({\"type\": \"NEW_LEMMA_SENSES\", \"payload\": lemma_senses});\r\n          });  \r\n        let wsd = api.get_wsd(tokens, isDummy);\r\n        return wsd;\r\n      }).then((tokens)=>{\r\n        console.log(\"wsd\");\r\n        console.log(tokens);\r\n        dispatch({\"type\": \"NEW_TAGGED\", \"payload\": tokens});\r\n\r\n        let sense_clouds = api.get_sense_clouds(tokens, isDummy);        \r\n        return sense_clouds\r\n      }).then((clouds: SenseClouds) => {\r\n        console.log(\"sense clouds\");\r\n        console.log(clouds);\r\n\r\n        dispatch({\"type\": \"NEW_SENSE_CLOUDS\", \"payload\": clouds});\r\n        completeFn();\r\n      });\r\n  }\r\n\r\n  function selectSense(senseId: string, isDummy=false) {\r\n    api.get_sense_data(senseId, isDummy)\r\n      .then((data: SenseData)=>{\r\n        console.log(\"sense data\");\r\n        console.log(data);\r\n        dispatch({\"type\": \"SELECT_SENSE\", \"payload\": data});\r\n      })\r\n  }\r\n\r\n  let controller = { updateSentence, selectSense } as ontoController;\r\n  return {ontoState, controller};\r\n}","import React from 'react';\r\nimport { WsdToken } from './data-types';\r\nimport \"./wsd-token.css\"\r\n\r\nexport interface WsdViewProps {\r\n  tokens: WsdToken[]\r\n}\r\n\r\nexport function WsdView(props: WsdViewProps) {\r\n  console.log(\"WsdView\")\r\n  console.log(props);\r\n  let words = props.tokens.map((x: WsdToken, idx: number) => {\r\n    return (\r\n      <div key={`token-${x[0]}-${idx}`} className=\"token-wrapper\">\r\n        <div className=\"pos\">\r\n          {x[1].endsWith(\"CATEGORY\")? \"\": x[1]}\r\n        </div>\r\n        <div className=\"word\">{x[0]}</div>        \r\n        <div className=\"badge badge-info sense-def\">{x[3]}</div>\r\n      </div>)\r\n  });\r\n\r\n  return (\r\n    <div className=\"d-flex flex-wrap\">\r\n      {words}\r\n    </div>\r\n  )\r\n}","import React, { useEffect } from 'react';\r\nimport { LemmaSense, LemmaSenses, SenseClouds, WsdToken } from './data-types';\r\nimport { build_graph, INode } from './build-graph';\r\nimport ForceGraph3D, { ForceGraph3DInstance } from '3d-force-graph';\r\nimport \"./sense-3d-view.css\";\r\n\r\nexport interface Sense3dViewProps {\r\n  tokens: WsdToken[];\r\n  lemmaSenses: LemmaSenses;\r\n  senseClouds: SenseClouds;    \r\n}\r\n\r\nexport function Sense3dView(props: Sense3dViewProps){\r\n  let graph3D: ForceGraph3DInstance;\r\n\r\n  useEffect(()=>{\r\n    console.log(\"sense 3d view\");\r\n    let graphData = build_graph(props.tokens, props.lemmaSenses, props.senseClouds);\r\n    let graphElem = document.getElementById(\"graph-3d\");\r\n\r\n    if(graphElem !== null){\r\n      graph3D = ForceGraph3D()(graphElem);\r\n      let elemWidth = graphElem.parentElement!.clientWidth;\r\n\r\n      graph3D.graphData(graphData)\r\n        .width(elemWidth)\r\n        .height(600)\r\n        .nodeLabel(\"label\")\r\n        .nodeAutoColorBy(\"type\")\r\n        .nodeVal((x)=>{\r\n          let node = x as INode;\r\n          if(node.type == \"Lemma\") return 20;\r\n          else return 3;\r\n        })\r\n        .linkWidth(3)\r\n        .zoomToFit(500, 20);\r\n    }\r\n  }, [props.lemmaSenses, props.senseClouds])\r\n  \r\n  return (\r\n    <div id=\"graph-3d\"></div>\r\n  )\r\n}","import { LemmaSense, SenseClouds, LemmaSenses, WsdToken } from \"./data-types\";\r\n\r\nexport interface OntoGraph {\r\n  nodes: INode[];\r\n  links: IEdge[];\r\n}\r\n\r\nexport interface INode {\r\n  id: string;\r\n  type: \"Lemma\" | \"CwnSense\" | \"PwnSynset\" |\r\n  \"HyperHypo\" | \"HoloMero\";\r\n  label: string;\r\n  fx?: number;\r\n  fy?: number;\r\n  fz?: number;\r\n}\r\n\r\nexport interface IEdge {\r\n  source: string;\r\n  target: string;\r\n  label: string;\r\n}\r\n\r\nexport function build_graph(tokens: WsdToken[], lemmaSenses: LemmaSenses, senseClouds: SenseClouds) {\r\n  let V = {} as { [nid: string]: INode };\r\n  let E = {} as { [eid: string]: IEdge };;\r\n\r\n  const PWN_LEVEL_0 = -200;\r\n  const PWN_LEVEL_1 = -400;\r\n  let lemmaMap: { [lemma: string]: string[] } = {};\r\n  tokens.map((token, idx) => {\r\n    let lemma = token[0];\r\n    let nid = `${lemma}-${idx}`;\r\n\r\n    if (lemma in lemmaMap) {\r\n      lemmaMap[lemma].push(nid);\r\n    } else {\r\n      lemmaMap[lemma] = [nid];\r\n    }\r\n\r\n    V[nid] = {\r\n      id: nid, type: \"Lemma\", label: lemma,\r\n      fx: idx * 100, fy: 0, fz: 0\r\n    } as INode;\r\n  });\r\n\r\n  Object.entries(lemmaSenses)\r\n    .map((val, idx) => {\r\n      let [lemma, senses] = val;\r\n\r\n      senses.map((sense: LemmaSense) => {\r\n        V[sense.id] = {\r\n          id: sense.id,\r\n          type: \"CwnSense\",\r\n          label: `(${sense.pos}) ${sense.definition}`,\r\n          fx: lemmaMap[lemma].reduce((sum, lemmaNodeId) => {\r\n            sum += V[lemmaNodeId].fx !== undefined ? V[lemmaNodeId].fx! : 0;\r\n            return sum;\r\n          }, 0) / lemmaMap[lemma].length\r\n        }\r\n\r\n        lemmaMap[lemma].map((lemmaNodeId) => {\r\n          let eid = `${lemmaNodeId}-${sense.id}`;\r\n          E[eid] = {\r\n            \"source\": lemmaNodeId,\r\n            \"target\": sense.id,\r\n            \"label\": \"hasSense\"\r\n          };\r\n        });\r\n      })\r\n\r\n    });\r\n\r\n  senseClouds = senseClouds ? senseClouds : {};\r\n\r\n  Object.entries(senseClouds)\r\n    .map((val, idx) => {\r\n      let [srcSenseId, senseCloud] = val;\r\n\r\n      senseCloud.relations.map((sense) => {\r\n        let [relType, senseId, headWord, pos, senseDef] = sense;\r\n        if (!(senseId in V)) {\r\n          V[senseId] = {\r\n            id: senseId, type: \"CwnSense\", label: `[${headWord}] (${pos}) ${senseDef}`\r\n          }\r\n        }\r\n\r\n        let eid = `${srcSenseId}-${senseId}`;\r\n        E[eid] = {\r\n          source: srcSenseId, target: senseId, label: \"CwnRelation\"\r\n        }\r\n      });\r\n\r\n      // build PWN synset link\r\n      let [_, pwnId] = senseCloud.pwn;\r\n      if (pwnId !== undefined && pwnId !== \"\") {\r\n        if (!(pwnId in V)) {\r\n          V[pwnId] = {\r\n            id: pwnId, type: \"PwnSynset\", label: pwnId,\r\n            fy: PWN_LEVEL_0\r\n          }\r\n        }\r\n\r\n        let eid = `${srcSenseId}-${pwnId}`;\r\n        E[eid] = {\r\n          source: srcSenseId, target: pwnId, label: \"PwnMapping\"\r\n        }\r\n      }\r\n\r\n      // build PWN synset relations\r\n      // link hypernyms\r\n      let pwn_onto = senseCloud.pwn_onto;\r\n\r\n      let link_chains = (chain: string[] | undefined, src: string, edgeLabel: string) => {\r\n        if (chain === undefined) {\r\n          return;\r\n        }\r\n\r\n        chain.reduce((prevPwnId, curPwnId) => {\r\n          if (!(curPwnId in V)) {\r\n            V[curPwnId] = {\r\n              id: curPwnId, type: \"HyperHypo\", label: curPwnId,\r\n              fy: PWN_LEVEL_1\r\n            }\r\n          }\r\n\r\n          let eid = `${prevPwnId}-${curPwnId}`;\r\n          E[eid] = {\r\n            source: prevPwnId, target: curPwnId, label: edgeLabel\r\n          }\r\n          return curPwnId;\r\n        }, src);\r\n      }\r\n\r\n      let link_to_base = (chain: string[] | undefined, src: string, edgeLable: string) => {\r\n        if (chain === undefined) {\r\n          return;\r\n        }\r\n\r\n        chain.map((curPwnId) => {\r\n          if (!(curPwnId in V)) {\r\n            V[curPwnId] = {\r\n              id: curPwnId, type: \"HoloMero\", label: curPwnId,\r\n              fy: PWN_LEVEL_1\r\n            }\r\n          }\r\n\r\n          let eid = `${src}-${curPwnId}`;\r\n          E[eid] = {\r\n            source: src, target: curPwnId, label: edgeLable\r\n          }\r\n        });\r\n      }\r\n\r\n      link_chains(pwn_onto.hypernyms, pwnId, \"hypernymy\");\r\n      link_chains(pwn_onto.hyponyms, pwnId, \"hyponymy\");\r\n      link_to_base(pwn_onto.holonyms, pwnId, \"holonymy\");\r\n      link_to_base(pwn_onto.meronyms, pwnId, \"meronymy\");\r\n\r\n    });\r\n\r\n  let G = { nodes: Object.values(V), links: Object.values(E) } as OntoGraph;\r\n  console.log(G);\r\n  return G\r\n}","import React, { useRef, useEffect, useState } from 'react';\r\nimport \"./cwn-onto-3d.css\"\r\nimport { useOntoState } from './onto-state';\r\nimport { WsdView } from './wsd-view';\r\nimport { Sense3dView } from './sense-3d-view';\r\n\r\nexport function CwnOnto3D() {\r\n  let { ontoState, controller } = useOntoState();\r\n  let inputElem = useRef<HTMLInputElement>(null);\r\n  let [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(()=>{\r\n    controller.updateSentence(\"<default>\", ()=>setIsLoading(false), true);\r\n  }, []);\r\n\r\n  let onInputKeyDown = (ev: React.KeyboardEvent) => {\r\n    if (ev.key === \"Enter\") {\r\n      console.log(\"enter\");\r\n      if (inputElem.current){\r\n        setIsLoading(true);\r\n        let txtInput = inputElem.current.value;              \r\n        controller.updateSentence(txtInput, ()=>setIsLoading(false));\r\n      }\r\n    }\r\n  }\r\n\r\n  let spinner = isLoading? (<div className=\"loader\">Loading</div>): null;\r\n  return (\r\n    <div className=\"container\">\r\n      <input\r\n        ref={inputElem}\r\n        id=\"inputText\" type=\"text\"\r\n        onKeyDown={onInputKeyDown}\r\n        placeholder=\"輸入句子\"></input>\r\n      <div className=\"cwn-onto-3d\">\r\n        {spinner} \r\n        <WsdView tokens={ontoState.tokens}/>               \r\n        <Sense3dView           \r\n          tokens={ontoState.tokens}\r\n          lemmaSenses={ontoState.lemmaSenses}\r\n          senseClouds={ontoState.senseClouds}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\nimport './App.css';\nimport { CwnOnto3D } from './cwn-onto-3d';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CwnOnto3D></CwnOnto3D>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}